<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typora+Picgo+Github轻松使用Markdown</title>
    <url>/2020/04/09/Typora+Picgo+Github%E8%BD%BB%E6%9D%BE%E4%BD%BF%E7%94%A8Markdown/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/unknown-known/image/img/20200409225551.png" alt="image-20200409225049323"></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前一直写 Markdown 都是用的 VScode，一直也没觉得有什么不好，也一直知道有 Typora 这个（专业的？）软件。我最开始的上手体验其实并没有多好，所以就放弃了。前几天看到群友推荐写 Markdown 的软件，有推这个的，也有推 VScode 的，一半一半吧。那我为什么会又尝试 Typora 呢？其实是室友推荐，他向我展示了一遍用 Typora 打表格的方法！然后我就有点心痒痒了。加上自己也有整理一下前端知识点的想法，表格用来做对比会有个很好的效果哈哈哈哈。所以就这么上手了。上手不到一个星期，我就迷上了这软件！</p>
<a id="more"></a>

<h2 id="主题功能"><a href="#主题功能" class="headerlink" title="主题功能"></a>主题功能</h2><p>一上手就发现了这个功能，自带的主题就那么几个。可以下，虽然能下的也不多，但是懂点前端的可以自己写样式！不过我看中一款挺好的，就不自己折腾了（还是懒加菜）。界面长下面这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/unknown-known/image/img/20200409212915.png" alt="image-20200409212845671"></p>
<p>官方滴更换主题教程：<a href="http://support.typora.io/About-Themes/" target="_blank" rel="noopener">教程</a></p>
<p>官方滴主题网站：<a href="http://theme.typora.io/" target="_blank" rel="noopener">主题网站</a></p>
<p>上面都有教程，就不多叨叨了！</p>
<h2 id="代码输入支持"><a href="#代码输入支持" class="headerlink" title="代码输入支持"></a>代码输入支持</h2><p>因为平常都是做的代码笔记居多，所以这功能就很重要了！实际体验下来还是很不错的，居然有代码补全，已经很不错了！不过毕竟比不过编辑器出生的 VScode 。</p>
<p>例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  这是一个小段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(scren.width);</span><br></pre></td></tr></table></figure>

<p>编辑界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/unknown-known/image/img/20200409222857.png" alt="image-20200409222855827"></p>
<h2 id="表格和公式支持"><a href="#表格和公式支持" class="headerlink" title="表格和公式支持"></a>表格和公式支持</h2><p>表格的编辑方式真的爱了爱了！</p>
<p>只要按照正常的 Markdown 语法输入，然后回车，就能以一种很舒服的方式来编辑表格了。</p>
<p>界面：<img src="https://cdn.jsdelivr.net/gh/unknown-known/image/img/20200409213843.png" alt="image-20200409213751933"></p>
<p>还有就是公式的支持了。这个倒是意外之喜了，一直都没关注过这方面。只是如今网课，就突然有了这个想法，用起来也很爽哈哈哈哈！只需要输入$$回车就可以编辑公式了</p>
<p>例子：</p>
<p>$$<br>\int_a^ba^2dx<br>$$</p>
<p>编辑界面：</p>
<img src="https://cdn.jsdelivr.net/gh/unknown-known/image/img/20200409220924.png" alt="image-20200409214521641"  />

<p>以下是一些写公式的语法：</p>
<p><a href="https://juejin.im/post/5a6721bd518825733201c4a2" target="_blank" rel="noopener">链接一</a></p>
<p><a href="https://juejin.im/post/5c0a27ee6fb9a049d05d8b70#heading-0" target="_blank" rel="noopener">链接二</a></p>
<h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><p>图片问题一直都是 Markdown 的痛点，之前使用的 VScode+Picgo+Github 虽然一定程度的解决了这个问题，但是还是有得自己手动进行上传图片，还是把写作的一体感给割裂开来了，还是得分神来上传图片，虽然有快捷键（但是我老忘记）。</p>
<p>现在使用 Typora 发现居然可以和 Picgo 联动！腻害！！每次粘贴完图片后，它会自己弹出上传选项来进行上传。似乎还有自动上传，我没去尝试（Github 上传老是失败，还是没钱，不然搞个 cos 会舒服很多）。</p>
<p>教程地址：<a href="http://support.typora.io/Upload-Image/" target="_blank" rel="noopener">图片上传教程</a></p>
<p>Picgo 官网：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">Picgo 官网</a></p>
<p>这里有个小坑：在配置的时候 Picgo 的服务端口一定要是 36677，不然会出现没办法联动的情况。</p>
<p><img src="https://cdn.jsdelivr.net/gh/unknown-known/image/img/20200409222219.png" alt="image-20200409222148869"></p>
<p>我之前不晓得什么情况，默认端口不是这个，就一直没上传成功，后来翻文档才晓得这回事。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Typora 使用起来还是很舒服的，对于一般的文案工作来说，Typora 有着或许可以说最优质的 Markdown 写作体验。对于写程序一类人员嘛，就看取舍了，一般的要求不高的写作可以直接 VScode 加装插件即可满足要求，而且可以直接把笔记过程的代码进行调试（不用更换软件），Typora 肯定得换软件才能进行调试咯。</p>
<p>写到这里脑子里莫名有这么一个想法：VScode 杂而不精，什么都可以做，但是这些都没有特别突出的地方（写前端很好，这个无法否认。在进行多语言混编的时候也贼强）。Typora 专精一个地方，所以它做到了别人都无法追赶的程度，在我所了解到的推荐专门写 Markdown 的软件里，最多的就是 Typora（排除掉那些笔记类应用，像印象笔记那些，那些都是有着强大的用户基础的，而且不是专做 Markdown 写作的）。</p>
<p>那反观一下自己，是不是有点太杂了，太浮躁了！什么都想学，现在反而导致了什么都不精，什么都做不完整。学 python，也就堪堪能写写爬虫，框架都没能学下来，能很明显的感觉到自己没办法啃下这块硬骨头，搞自动化，也是只能模拟一些简单的鼠标键盘操作，都没办法很熟练的运用。前端也学得太急了，现在回过头来看，自己写布局的时候都是特别吃力的，更别提特效和 JS 了。Linux 运维也就只会装个软件，稍微的玩玩，然而都没到精髓。</p>
<p>慢慢来！一步一个脚印，不就是重来一遍吗！又不是玩不起！以后每周更新一次笔记！日常写写小页面。一点点的积累下来。把这种技能融入骨子里，就不会忘了！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>心迹（四）</title>
    <url>/2020/03/30/%E5%BF%83%E8%BF%B9%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/unknown-known/image/master/20200330223727.png" alt="题图"></p>
<p>也没有什么，就是一时心血来潮的翻了翻自己以前的QQ空间，顺带着把她空间也看了看。突然记起来好多好多事。很碰巧，已经认识一年了</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/unknown-known/image/master/20200330214701.png" alt="截图为证"></p>
<p>突然想起来那天我傻乎乎的推敲了一堆还和室友在争：她肯定是我们学校的！！而且说不定还是我们数学班的，看这背景，肯定就是我们火炬楼的那个大教室！那个只有一个摄像头照不全的教室！然后后面还把这个和她说了一堆。哈哈哈哈，傻得一批！后面就是问到名字。很碰巧的后面刚好有次课在她们班教室上课，还刚刚好的坐到了她们班副班的座位上！更巧的是，他们班的那个加分的那东西还放在桌上！！摆得那叫一个好，简直就是在诱惑我去翻！我出于人道主义——当然要去翻啦！然后一圈翻下来？？没有孟姓的？我当时就呆住了，她骗我？？我也是憨憨，当时也没有立即去问，后面记不得是啥时候了，好像提起来这个事情。才晓得是她网名（或者说是小名）。（我当时还以为我碰到网骗了！哈哈哈）</p>
<p>一晃，一年过去！中途也断过联系。不过后来兜兜转转居然走到了一起。很幸运，也让我有点惶恐（我自我认为我是没有什么优点的，而且贼缺安全感的一个人）。这段时间以来我一直觉得少了点什么，我一直没办法找到自己应该有的定位，应该是什么样，该是什么样，一直都没有一个明确的目标。加上以前的一些个人原因，整个人的想法是很消极的，真的缺了很多很多东西（最严重的时候是丧失学习能力的，同时伴有轻微的自杀倾向）。日常中虽然也都有互动，但是我很多时候都不知道我到底以一个什么样的感觉去回应，还是会想得太多！希望能够改变一点点吧！现在也在一点点的改变自己的想法，一定都会好的！毕竟乌云都散去了，阳光都已经照下来了！你还有什么理由活在阴霾里！</p>
<p>最近一切都在好起来！该学的都慢慢的都能理解，猛然间发现自己原来在别人眼中是一个特别特别好的人，原来自己慢慢的已经积累了很多很多。不再是那个做什么事情都被否认的人了！就到此落笔吧！还有很多目标等着我去完成！</p>
<p>想要的都得到！得不到的都释怀！不再受累于世俗，做那个最真实的自己！</p>
]]></content>
      <categories>
        <category>心迹</category>
      </categories>
      <tags>
        <tag>心迹</tag>
      </tags>
  </entry>
  <entry>
    <title>心迹（三）</title>
    <url>/2020/03/17/%E5%BF%83%E8%BF%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/unknown-known/image/master/20200318001509.gif" alt="沉溺"><br>一直以来对于疫情都没有太大的感知度，可能因为在农村吧，消息来的慢，年前的我还在计划着今年生日要不要去哪玩！最后发现，想也就只能想想啦！后面开始慢慢的来消息，开始戒严，然后封村，最后推迟开学，使用上网课的形式来上课。于是就这样子开始了近俩月的在家生活。</p>
<a id="more"></a>

<p>以前真的完全没想过会有这么长的自由时间供自己支配，所以一切都是按照放假的规格准备的：吃喝拉撒玩！在宣布延迟开学的前一段时间天天都是白天游戏，晚上游戏，丝毫不带歇的。随着以前的同学开始陆续上网课，我开始慢慢的觉得缺了点东西？可能是堕落太久了吧，甚至都感知不到自己到底缺了什么。</p>
<p>好像最近发生了好多好多事，似乎好像一切都在梦里一般。有的时候希望这真的是一场梦，有的时候却希望这场梦永远的不要醒。</p>
<p>就先拿今天说吧！我这18年来第一次看到我父母当着我的面吵架，等到爸妈吵完后我清楚的记得我是浑身抖着，带着哭腔的和我爸说：“妈不是在生你的气，只是人言可畏，你确实没做什么，但是在别人看来就不是这样了！看热闹的人当然不嫌事大。”家事不便多说，看出来的心里知道就好，就放心里吧。</p>
<p>往前一点，我可以说很幸运很幸运。其实我一直都不是很晓得为什么会是我，不过既然是我，那就是一点缘分，一点注定吧！我现在虽然不够优秀，但是只要给我一点时间，就一点，我一定可以的！！她都选择了相信我，我自己有什么理由不相信我呢？</p>
<p>再往前一点，刚刚过的18岁生日，虽然因为疫情原因，过了个在家的生日，但是真的让我发现了还是有很多朋友在关心着我的，以前一直觉得人与人之间的关系始终是带有功利性的，带有目的的。这次突然想开了，就算都有，那又如何，自己开心就好，何必去计较那么多得失！</p>
<p>再再往前一点，人生中的第一次补考就这么不经意间诞生了！刚刚开始有点觉得不太能接受，不过后来想想补考也是应当的。</p>
<p>还有很多很多关于自己的，关于这个社会，这个世界的！就不再提了。我们这次的经历真的就是真真切切的在经历历史吧！</p>
<p>明明还有很多话想写出来，但是却不知道该从哪开始写起，就先这样吧！</p>
<p>（创建于2020.3.17——落笔完成于2020.03.19）</p>
]]></content>
      <categories>
        <category>心迹</category>
      </categories>
      <tags>
        <tag>心迹</tag>
      </tags>
  </entry>
  <entry>
    <title>博客图床的选择与使用</title>
    <url>/2020/03/12/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前一直用的图床工具都是picgo，图床使用的都是github，虽然访问速度有点慢（将就着用吧，其他的图床都不太靠谱的感觉，而且很多都是收费的，没钱！！！）</p>
<p>介意速度的话阔以参考<a href="https://zhuanlan.zhihu.com/p/35270383" target="_blank" rel="noopener">这里</a>选择其他图床</p>
<p>由于之前一次更新软件以及github改名导致的软件使用不了，现在又有了图片上传的需求，由此写下了这篇图文</p>
<a id="more"></a>

<h2 id="使用-配置"><a href="#使用-配置" class="headerlink" title="使用/配置"></a>使用/配置</h2><p>准备工作：</p>
<ol>
<li><p>下载安装picgo<br> <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载地址</a></p>
</li>
<li><p>配置git库<br> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312165917.png" alt="git库创建"></p>
<p> 直接创建即可</p>
</li>
<li><p>生成token</p>
<ol>
<li><p>点击设置（settings）</p>
<p> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312170155.png" alt="点击设置"></p>
</li>
<li><p>点击开发人员设定（Developer settings）</p>
<p> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312170436.png" alt="开发人员设定"></p>
</li>
<li><p>点击个人访问令牌（Personal access tokens）</p>
<p> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312170623.png" alt="个人访问令牌"></p>
</li>
<li><p>点击 生成新令牌（generate new token）创建新令牌</p>
<p> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312170810.png" alt="生成令牌"></p>
</li>
<li><p>token权限设置</p>
<p> 定义好名字（note）然后勾选repo即可，其他权限不需要。</p>
<p> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312171044.png" alt="设置token权限"></p>
</li>
<li><p>复制保存token，后面会用上</p>
<p> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312171327.png" alt="token"></p>
</li>
</ol>
</li>
<li><p>配置软件</p>
<ol>
<li><p>打开软件，选择图床设置，选中GitHub图床</p>
<p> 按照图中配置配置,将设定仓库名改为自己的，其他的不用更改，照填即可。<br> <img src="https://raw.githubusercontent.com/unknown-known/image/master/20200312171617.png" alt="图床配置"></p>
</li>
<li><p>到此基本配置完毕，其他的就靠自己摸索了。</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>git多仓库部署</title>
    <url>/2020/02/26/git%E5%A4%9A%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="文章转载自"><a href="#文章转载自" class="headerlink" title="文章转载自"></a>文章转载自</h2><p><a href="https://github.com/xirong/my-git/blob/master/use-gitlab-github-together.md" target="_blank" rel="noopener">Github</a></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于公司团队使用 GitLab 来托管代码，同时，个人在 Github 上还有一些代码仓库，可公司邮箱与个人邮箱是不同的，由此产生的 SSH key 也是不同的，这就造成了冲突 ，文章提供此类问题的解决方案：如何在一台机器上面同时使用 Github 与 Gitlab 的服务？</p>
<a id="more"></a>

<h2 id="问题产生场景"><a href="#问题产生场景" class="headerlink" title="问题产生场景"></a>问题产生场景</h2><h3 id="无密码与远程服务器交互的秘密-SSH"><a href="#无密码与远程服务器交互的秘密-SSH" class="headerlink" title="无密码与远程服务器交互的秘密 - SSH"></a>无密码与远程服务器交互的秘密 - SSH</h3><p>如果采用ssh 协议或者git 协议通过终端命令对远程仓库进行push操作的时候，大概的过程如下：（前提在 Github 上已经配置的本机的 SSH Public Key）</p>
<ol>
<li><p>客户端发起一个 Public Key 的认证请求，并发送RSA Key的模数作为标识符。（关于 RSA Key 详细 <a href="https://en.wikipedia.org/wiki/RSA_(algorithm)" target="_blank" rel="noopener">维基百科</a>）</p>
</li>
<li><p>服务端检查是否存在请求帐号的公钥（Linux中存储在~/.ssh/authorized_keys文件中），以及其拥有的访问权限。</p>
</li>
<li><p>服务端使用对应的公钥对一个随机的256位的字符串进行加密，并发送给客户端。</p>
</li>
<li><p>客户端使用私钥对字符串进行解密，并将其结合session id生成一个MD5值发送给服务端。 结合session id的目的是为了避免攻击者采用重放攻击（replay attack）。</p>
</li>
<li><p>服务端采用同样的方式生成MD5值与客户端返回的MD5值进行比较，完成对客户端的认证。</p>
</li>
<li><p>将push的内容进行加密与服务端传输数据。</p>
</li>
</ol>
<p>关于 SSH，请查看 <a href="http://erik-2-blog.logdown.com/posts/74081-ssh-principle" target="_blank" rel="noopener">SSH原理简介</a>SSH原理简介 ，更通俗易懂的文章请查看<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">阮一峰-SSH原理与运用（一）：远程登录</a> 。</p>
<h3 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h3><p>无论使用哪种代码托管服务商，对于 Git 而言，邮箱 是识别用户的唯一手段，所以对于不同的服务商，由于邮箱不同，那么通过邮件名创建的 SSH Key 自然是不同的，这时候在不同的服务商之间进行 push 命令的时候，Git 是不知道使用哪个 SSH Key ，自然导致 push 的失败。场景如下：</p>
<ol>
<li>在公司团队使用搭建的 Gitlab 服务，提交邮箱<a href="mailto:xirong.liu@corp.xx.com">xirong.liu@corp.xx.com</a>， 个人 Github 服务，提交邮箱 <a href="mailto:ixirong.liu@gmail.com">ixirong.liu@gmail.com</a> （Bitbucket 同理）。</li>
<li>有两个Github账户，不同的账户提交不同的仓库内容。</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：同一个邮箱"><a href="#方案一：同一个邮箱" class="headerlink" title="方案一：同一个邮箱"></a>方案一：同一个邮箱</h3><p>由于邮箱是识别的唯一手段，那么自然的，这两者采用同一个邮箱，生成的 public key 也会是同一个，上传到 Github 或者 Gitlab 上面，在 Git 的配置中 ，设置好 Global 的配置：</p>
<blockquote>
<p>git config –global user.name ‘xirong.liu’ &amp;&amp; git config –global user.email ‘xirong.liu@corp.xx.com’</p>
</blockquote>
<p>进行日常的开发是没有问题的。</p>
<p>实际生活中采用同一个邮箱的可能性并不是太大，这就引出了方案二</p>
<h3 id="方案二：基于config文件"><a href="#方案二：基于config文件" class="headerlink" title="方案二：基于config文件"></a>方案二：基于config文件</h3><p>所谓的方案二，原理上就是对 SSH 协议配置 config 文件，对不同的域名采用不同的认证密钥。</p>
<p>git config 介绍</p>
<p>Git有一个工具被称为git config，它允许你获得和设置配置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量可以被存储在三个不同的位置：</p>
<pre><code>1. /etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。
2. ~/.gitconfig 文件 ：具体到你的用户。你可以通过传递 ‘--global’ 选项使Git 读或写这个特定的文件。
3. 位于 Git 目录的 config 文件 (也就是 .git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在 .git/config 中的值覆盖了在/etc/gitconfig中的同一个值，可以通过传递‘--local’选项使Git 读或写这个特定的文件。</code></pre><p>由于采用了不同的邮箱，对不同的服务商进行提交，所以此时我们经常配置的</p>
<blockquote>
<p>git config –global</p>
</blockquote>
<p>就不能常用了，必须在每个仓库的目录下进行配置自己的用户名、邮箱。（嫌麻烦？xirong 是这么解决的，由于个人的 Github 上有较多的仓库，而自己团队的代码基本上都是稳定的，有数的几个，所以在</p>
<blockquote>
<p>git config –global user.email ‘ixirong.liu@gmail.com’</p>
</blockquote>
<p>中全局配置的是个人邮箱，在团队的项目中配置）</p>
<h4 id="1-配置-Git-用户名、邮箱"><a href="#1-配置-Git-用户名、邮箱" class="headerlink" title="1. 配置 Git 用户名、邮箱"></a>1. 配置 Git 用户名、邮箱</h4><p>如刚才所说，xirong 的配置如下：</p>
<p>全局配置，Github仓库中默认使用此配置</p>
<blockquote>
<p>git config –global user.name ‘xirong’ &amp;&amp; git config –global user.email ‘ixirong.liu@gmail.com’</p>
</blockquote>
<p>团队项目配置，每次新创建一个项目，需要执行下</p>
<blockquote>
<p>git config –local user.name ‘xirong.liu’ &amp;&amp; git config –local user.email ‘xirong.liu@corp.example.com’</p>
</blockquote>
<h4 id="2-生成-ssh-key-上传到-Github-Gitlab"><a href="#2-生成-ssh-key-上传到-Github-Gitlab" class="headerlink" title="2. 生成 ssh key 上传到 Github/Gitlab"></a>2. 生成 ssh key 上传到 Github/Gitlab</h4><p>ssh key 默认生成后保存在 ~/.ssh/目录下 ，默认为 id_rsa 和 id_rsa.pub 两个文件，由于我们需要分开配置，所以这么做：</p>
<ol>
<li><p>生成公钥、密钥的同时指定文件名，Gitlab使用</p>
<blockquote>
<p>ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitlab -C “<a href="mailto:xirong.liu@corp.example.com">xirong.liu@corp.example.com</a>“</p>
</blockquote>
</li>
<li><p>生成默认，Github使用</p>
<blockquote>
<p>ssh-keygen -t rsa -C “<a href="mailto:ixirong.liu@gmail.com">ixirong.liu@gmail.com</a>“</p>
</blockquote>
<p> 命令执行完成后，这时~/.ssh目录下会多出id_rsa.gitlab和id_rsa.gitlab.pub两个文件，id_rsa.gitlab.pub 里保存的就是我们要使用的key，这个key就是用来上传到 Gitlab上的。</p>
</li>
<li><p>配置 config 文件<br> 在 ~/.ssh目录下，如果不存在，则新建 touch ~/.ssh/config文件 ，文件内容添加如下：</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Host corp.example.com</span><br><span class="line">    HostName git.corp.example.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa.gitlab</span><br><span class="line">   <span class="built_in"> User </span>xirong.liu</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Host参数是命令行给出的主机名，比如ssh -T <a href="mailto:git@corp.example.com">git@corp.example.com</a>，那么此时的主机(Host)就是corp.example.com</p>
</li>
<li><p>只有Host匹配之后，SSH把<a href="mailto:git@corp.example.com">git@corp.example.com</a>转换成git.corp.example.com</p>
</li>
<li><p>Host不支持<em>和主机名混用，即</em>.example.com；单独*表示匹配所有主机，也就是默认规则</p>
</li>
<li><p>HostName应该是必须填写的内容，根据你使用的命令行内容来填写</p>
<p>配置完成后，符合git.corp.example.com的 Git 仓库，均采取 ~/.ssh/id_rsa.gitlab 密钥进行验证，其它的采取默认的。</p>
</li>
</ul>
</li>
<li><p>上传public key 到 Github/Gitlab<br> 以Github为例，过程如下：</p>
<ol>
<li><p>登录github</p>
</li>
<li><p>点击右上方的Accounting settings图标</p>
</li>
<li><p>选择 SSH key</p>
</li>
<li><p>点击 Add SSH key</p>
<p>在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的~/.ssh/id_rsa.pub文件内容粘帖到key一栏，在点击“add key”按钮就可以了。</p>
<p>添加过程github会提示你输入一次你的github密码 ，确认后即添加完毕。 上传Gitlab的过程一样，请自己操作。</p>
</li>
</ol>
</li>
<li><p>验证是否OK</p>
<p> 由于每个托管商的仓库都有唯一的后缀，比如 Github的是 <a href="mailto:git@github.com">git@github.com</a>:*，所以可以这样测试：</p>
 <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">➜  ~  ssh -T git@github.com</span><br><span class="line">Hi xirong! You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.</span><br><span class="line">➜  ~  ssh -T git@gitlab.dev</span><br><span class="line">Welcome <span class="keyword">to</span> GitLab, xirong.liu!</span><br></pre></td></tr></table></figure>

<p> 看到这些 Welcome 信息，说明就是 OK的了。</p>
</li>
</ol>
<p>以后，如果还有任何的需求，都可以这么解决</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>debian手动编译安装python3.7</title>
    <url>/2020/02/17/debian%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python3-7/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前阿里云搞学生活动，撸了台免费的2核4g的服务器，想着要用上，就开始折腾起来了。</p>
<p>于是就想着写一个网易云热评的爬虫，以后可能会做个博客插件，自动显示抓取到的热评。在本地其实写完爬虫了，但是用的是python3.7，服务器用的还是3.5的版本，于是就有了这篇博文</p>
<a id="more"></a>

<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><pre><code>注：以下命令都是在root用户下操作，若普通用户操作请自行加上 sudo </code></pre><ol>
<li><p>首先是卸载本地的python3.5版本的python</p>
<blockquote>
<p>apt autoremove python3</p>
</blockquote>
</li>
<li><p>安装编译环境</p>
<blockquote>
<p>apt-get install -y make build-essential gcc libffi-dev libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev</p>
</blockquote>
</li>
<li><p>下载需要的python版本的安装包（我比较喜欢将下载下来的文件单独放在一个文件夹里）</p>
<blockquote>
<p>mkdir ~/python3.7<br>cd ~/python3.7<br>wget <a href="https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</a></p>
</blockquote>
</li>
<li><p>解压文件</p>
<blockquote>
<p>tar -xvf Python-3.7.6.tar.xz</p>
</blockquote>
</li>
<li><p>编译 安装 pyhon</p>
<blockquote>
<p>cd Python-3.7.6<br>./configure –prefix=/usr/local/python3/ –enable-optimizations<br>make &amp;&amp; make install</p>
</blockquote>
</li>
<li><p>软链接python</p>
<blockquote>
<p>ln -s /usr/local/python3/bin/python3.7 /usr/bin/python3<br>ln -s /usr/local/python3/bin/pip3.7 /usr/bin/pip3</p>
</blockquote>
</li>
<li><p>安装完成（可以通过以下命令查看是否安装成功）</p>
<blockquote>
<p>python3 -V<br>pip3 -V</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署踩坑记</title>
    <url>/2020/01/20/hexo%E9%83%A8%E7%BD%B2%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>Hexo本地预览没有一点问题，但是就是推送不上git，报错如下</p>
<p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120152027.png" alt="报错详情">\</p>
<a id="more"></a>

<p>推测原因：肯定是在部署的过程中出现的问题，而且很大可能本地缺少某个文件造成的</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.设置Git的username</p>
<blockquote>
<p>git config –global user.name “yourname”</p>
</blockquote>
<p>2.设置Git的email</p>
<blockquote>
<p>git config –global user.email “youremail”</p>
</blockquote>
<p>3.生成秘钥</p>
<blockquote>
<p>ssh-keygen -t rsa -C “youremail”</p>
</blockquote>
<p>会提示输入密码一类的东西，都回车就行</p>
<p>然后会生成 id_rsa文件 和 id_rsa.pub文件</p>
<p>最后GitHub上添加ssh秘钥，也就是id_rsa.pub里的秘钥</p>
<p>问题解决</p>
<h2 id="实际原因"><a href="#实际原因" class="headerlink" title="实际原因"></a>实际原因</h2><p>由于平常会进行一些直接用Windows的cmd进行ssh连接，所以之前把这个秘钥给误删了，但是生成这个秘钥后就不能正常的使用cmd进行ssh连接了，所以ssh连接还是用PUTTY吧</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu单用户模式</title>
    <url>/2020/01/20/ubuntu%E5%8D%95%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>虚拟机内误操作，导致无法切换root用户，原因为：用户权限过低，无法切换。（我TM完全不晓得我完成了什么操蛋操作！！我不准我访问我自己？！？）</p>
<a id="more"></a>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="解决问题思路"><a href="#解决问题思路" class="headerlink" title="解决问题思路"></a>解决问题思路</h3><p>进入Ubuntu单用户模式[类似window的安全模式]，更改用户权限。（我是直接将权限提升为0，即root权限。不建议提权提得太高，不然误操作的损失会非常大。）</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-重启系统，在启动时长按shift键，进入grub菜单"><a href="#1-重启系统，在启动时长按shift键，进入grub菜单" class="headerlink" title="1.重启系统，在启动时长按shift键，进入grub菜单"></a>1.重启系统，在启动时长按shift键，进入grub菜单</h4><p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120121104.png" alt="grub菜单"></p>
<h4 id="2-按“e”编辑启动项"><a href="#2-按“e”编辑启动项" class="headerlink" title="2.按“e”编辑启动项"></a>2.按“e”编辑启动项</h4><p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120121207.png" alt="启动项编辑"></p>
<h4 id="3-修改Linux行"><a href="#3-修改Linux行" class="headerlink" title="3.修改Linux行"></a>3.修改Linux行</h4><p>修改前：</p>
<p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120113340.png" alt="修改前"></p>
<p>修改后：</p>
<p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120113502.png" alt="修改后"></p>
<h4 id="4-保存并重启进入单用户模式"><a href="#4-保存并重启进入单用户模式" class="headerlink" title="4.保存并重启进入单用户模式"></a>4.保存并重启进入单用户模式</h4><p>修改完成后按ctrl+x或F10保存修改并重启就会进入单用户模式。</p>
<p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120121414.webp" alt="单用户模式"></p>
<h4 id="5-找到权限管理文件并提权-图片为已经进入系统后补上的"><a href="#5-找到权限管理文件并提权-图片为已经进入系统后补上的" class="headerlink" title="5.找到权限管理文件并提权(图片为已经进入系统后补上的)"></a>5.找到权限管理文件并提权(图片为已经进入系统后补上的)</h4><p>输入以下命令编辑权限文件</p>
<blockquote>
<p>vim /etc/passwd</p>
</blockquote>
<p>如果没有安装vim可用以下命令</p>
<blockquote>
<p>vi /etc/passwd</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200120114815.png" alt="权限文件"></p>
<h4 id="6-单用户模式说明"><a href="#6-单用户模式说明" class="headerlink" title="6.单用户模式说明"></a>6.单用户模式说明</h4><p>reboot  init 0  shutdown -c等命令在单用户模式不会起作用，所以要用ctrl + alt + delete来重启</p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>在Linux系统忘记登陆密码的时候也可以用这种方法进入单用户模式，直接输入以下命令进行密码修改</p>
<blockquote>
<p>passwd 要修改密码的用户的用户名</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/zhangmingcheng/articles/8213819.html" target="_blank" rel="noopener">参考链接1</a></p>
<p><a href="https://www.jianshu.com/p/c17f29a404e8" target="_blank" rel="noopener">参考链接2</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>debian处理软件包出错方法</title>
    <url>/2020/01/19/debian%E5%A4%84%E7%90%86%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%87%BA%E9%94%99%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h2><p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20200119192106.png" alt="问题图片"></p>
<a id="more"></a>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>注：以下命令皆在root用户下执行</strong></br></p>
<h3 id="1-进入目标目录"><a href="#1-进入目标目录" class="headerlink" title="1.进入目标目录"></a>1.进入目标目录</h3><blockquote>
<p>cd /var/lib/dpkg</p>
</blockquote>
<h3 id="2-重命名目标目录中的info文件夹"><a href="#2-重命名目标目录中的info文件夹" class="headerlink" title="2.重命名目标目录中的info文件夹"></a>2.重命名目标目录中的info文件夹</h3><blockquote>
<p>mv info info.bak</p>
</blockquote>
<h3 id="3-创建一个新的info文件夹"><a href="#3-创建一个新的info文件夹" class="headerlink" title="3.创建一个新的info文件夹"></a>3.创建一个新的info文件夹</h3><blockquote>
<p>mkdir info</p>
</blockquote>
<h3 id="4-执行更新操作"><a href="#4-执行更新操作" class="headerlink" title="4.执行更新操作"></a>4.执行更新操作</h3><blockquote>
<p>apt-get update &amp;&amp; apt-get -f install</p>
</blockquote>
<h3 id="5-将更新产生的文件移动到创建的info-bak文件下"><a href="#5-将更新产生的文件移动到创建的info-bak文件下" class="headerlink" title="5.将更新产生的文件移动到创建的info.bak文件下"></a>5.将更新产生的文件移动到创建的info.bak文件下</h3><blockquote>
<p>mv info/* info.bak</p>
</blockquote>
<h3 id="6-删除创建的info文件夹"><a href="#6-删除创建的info文件夹" class="headerlink" title="6.删除创建的info文件夹"></a>6.删除创建的info文件夹</h3><blockquote>
<p>rm -rf info</p>
</blockquote>
<h3 id="7-将info-bak重命名回info"><a href="#7-将info-bak重命名回info" class="headerlink" title="7.将info.bak重命名回info"></a>7.将info.bak重命名回info</h3><blockquote>
<p>mv info.bak info</p>
</blockquote>
<h3 id="8-再次执行更新"><a href="#8-再次执行更新" class="headerlink" title="8.再次执行更新"></a>8.再次执行更新</h3><blockquote>
<p>apt-get update &amp;&amp; apt-get -f install</p>
</blockquote>
<h2 id="解决方法来源"><a href="#解决方法来源" class="headerlink" title="解决方法来源"></a>解决方法来源</h2><p>解决方法来自以下博客：<a href="https://www.qingsword.com/qing/ubuntu-dpkg-configure-error.html" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos通过yum安装nginx</title>
    <url>/2020/01/19/centos%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85nginx/</url>
    <content><![CDATA[<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><p><strong>注：以下命令都在root用户下使用，若不使用root用户，可在每一个yum之前加上sudo即可</strong></br><br>安装依赖</p>
<blockquote>
<p>yum install yum-utils</p>
</blockquote>
<a id="more"></a>

<h2 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h2><p>新建nginx源的文件</p>
<blockquote>
<p>vi /etc/yum.repos.d/nginx.repo</p>
</blockquote>
<p>输入以下内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">[nginx-stable]</span></span><br><span class="line"><span class="attr">name</span>=nginx stable repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"><span class="section">[nginx-mainline]</span></span><br><span class="line"><span class="attr">name</span>=nginx mainline repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br></pre></td></tr></table></figure>

<p>并保存（如果不会使用vi编辑，教程在这里:<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">菜鸟教程</a>）</p>
<h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><blockquote>
<p>yum update</p>
</blockquote>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><blockquote>
<p>yum install nginx</p>
</blockquote>
]]></content>
      <categories>
        <category>软件安装教程</category>
      </categories>
      <tags>
        <tag>软件安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx安装流程</title>
    <url>/2019/12/08/nginx%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>   我使用的是Centos7</p>
<p><img src="https://raw.githubusercontent.com/Maybehard/image/master/20191208232351.png" alt="Centos7"></p>
<a id="more"></a>

<h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><h3 id="安装PCRE"><a href="#安装PCRE" class="headerlink" title="安装PCRE"></a>安装PCRE</h3><p>PCRE 作用是让 Nginx 支持 Rewrite 功能。（我暂时还晓不得这是啥）</p>
<p>1.下载地址为<a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></p>
<p>下载命令为： <code>wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</code></p>
<p>2.解压文件</p>
<p>命令为： <code>tar zxvf pcre-8.35.tar.gz</code><br><img src="https://raw.githubusercontent.com/Maybehard/image/master/20191208235200.png" alt="已解压的文件"><br>3.进入已解压的文件目录</p>
<p>命令为： <code>cd pcre-8.35</code><br><img src="https://raw.githubusercontent.com/Maybehard/image/master/20191208235043.png" alt="进入目录"></p>
<p>4.编译安装</p>
<p>命令为：</p>
<p><code>./configure</code><br><code>make &amp;&amp; make install</code></p>
<p>5.查看pcre版本（确认安装无误）<br>命令为：<code>pcre-config --version</code></p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>1.下载地址为：<a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/start/topics/tutorials/install/</a></p>
<p>下载命令为： <code>wget 要下载的nginx版本</code></p>
<p>2.解压文件</p>
<p>命令为： <code>tar zxvf 下载的文件名</code></p>
<p>3.进入已解压的文件目录</p>
<p>命令为： <code>cd 解压好文件的文件名</code></p>
<p>4.编译安装</p>
<p>命令为：</p>
<p><code>./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</code></p>
<p><code>./configure</code></p>
<p><code>make &amp;&amp; make install</code></p>
<p>5.查看nginx版本（确认安装无误）</p>
<p>命令为：<code>/usr/local/webserver/nginx/sbin/nginx -v</code></p>
<p>(如果出错的话可以试试/usr/local/nginx/sbin/nginx -v)</p>
<p>至此 nginx安装完成，后面的配置下次再添加</p>
]]></content>
      <categories>
        <category>软件安装教程</category>
      </categories>
      <tags>
        <tag>软件安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title>网页更新日志</title>
    <url>/2018/10/13/%E7%BD%91%E9%A1%B5%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="2020-4-9-更新日志"><a href="#2020-4-9-更新日志" class="headerlink" title="2020.4.9 更新日志"></a>2020.4.9 更新日志</h2><ol>
<li>新增博文《Typora+Picgo+Github 轻松使用 Markdown》</li>
</ol>
<h2 id="2020-3-30-更新日志"><a href="#2020-3-30-更新日志" class="headerlink" title="2020.3.30 更新日志"></a>2020.3.30 更新日志</h2><ol>
<li>补全 about</li>
<li>新增博文《心迹（四）》</li>
</ol>
<a id="more"></a>

<h2 id="2020-3-17-更新日志"><a href="#2020-3-17-更新日志" class="headerlink" title="2020.3.17 更新日志"></a>2020.3.17 更新日志</h2><ol>
<li>新增博文《心迹（三）》</li>
</ol>
<h2 id="2020-3-12-更新日志"><a href="#2020-3-12-更新日志" class="headerlink" title="2020.3.12 更新日志"></a>2020.3.12 更新日志</h2><ol>
<li>新增分类：博客（将 hexo 部署踩坑记加入该分类）</li>
<li>新增博文《博客图床的选择与使用》</li>
</ol>
<h2 id="2020-2-26-28-更新日志"><a href="#2020-2-26-28-更新日志" class="headerlink" title="2020.2.26-28 更新日志"></a>2020.2.26-28 更新日志</h2><ol>
<li>转载博文《git 多仓库部署》</li>
<li>博客部署地址的改变：<ul>
<li>国内推荐访问地址：<a href="https://unknown-known.gitee.io/" target="_blank" rel="noopener">https://unknown-known.gitee.io/</a>（基本 3 秒以内打开）</li>
<li>国外推荐访问地址：<a href="https://www.aliyun.gq/" target="_blank" rel="noopener">https://www.aliyun.gq/</a> (部署在 Github 上，国内速度不太快)</li>
</ul>
</li>
<li>将 2020.1.22 出现的问题排查出来并解决了，换回原 git 地址</li>
<li>开启评论系统，使用的是：Valine</li>
<li>修复搜索功能,开启 RSS Feed</li>
<li>右上角添加 fork me on Github</li>
</ol>
<h2 id="2020-2-17-更新日志"><a href="#2020-2-17-更新日志" class="headerlink" title="2020.2.17 更新日志"></a>2020.2.17 更新日志</h2><ol>
<li>将心迹系列博文收归本地</li>
<li>将资源分享博文收归本地</li>
<li>新增博文《debian 手动编译安装 python3.7》</li>
</ol>
<h2 id="2020-2-11-更新日志"><a href="#2020-2-11-更新日志" class="headerlink" title="2020.2.11 更新日志"></a>2020.2.11 更新日志</h2><ol>
<li>主题更改</li>
<li>新增博文《心迹（二）》</li>
<li>将原博文《心迹》更改为《心迹（一）》</li>
</ol>
<h2 id="2020-1-22-更新日志"><a href="#2020-1-22-更新日志" class="headerlink" title="2020.1.22 更新日志"></a>2020.1.22 更新日志</h2><ol>
<li>新增博文《Hexo 部署踩坑记》</li>
<li>由于原地址出现问问题，新开了一个 GitHub 账号：<a href="https://github.com/come-down" target="_blank" rel="noopener">https://github.com/come-down</a></li>
</ol>
<h2 id="2020-1-20-更新日志"><a href="#2020-1-20-更新日志" class="headerlink" title="2020.1.20 更新日志"></a>2020.1.20 更新日志</h2><ol>
<li>整理资料后新增博文《Ubuntu 单用户模式》</li>
</ol>
<h2 id="2020-1-19-更新日志"><a href="#2020-1-19-更新日志" class="headerlink" title="2020.1.19 更新日志"></a>2020.1.19 更新日志</h2><ol>
<li>新增博文：《centos 通过 yum 安装 nginx》与《debian 处理软件包出错方法》</li>
<li>更改博客主题为 fluid（对效果不是很满意）</li>
<li>新增分类：Linux</li>
</ol>
<h2 id="2019-12-8-更新日志"><a href="#2019-12-8-更新日志" class="headerlink" title="2019.12.8 更新日志"></a>2019.12.8 更新日志</h2><ol>
<li>新增博文：《nginx 安装流程》</li>
<li>新增分类：软件安装教程</li>
</ol>
<h2 id="2019-10-5-更新日志"><a href="#2019-10-5-更新日志" class="headerlink" title="2019.10.5 更新日志"></a>2019.10.5 更新日志</h2><ol>
<li>《爱在黎明破晓前》观后感留存本地</li>
</ol>
<h2 id="2019-9-14-更新日志"><a href="#2019-9-14-更新日志" class="headerlink" title="2019.9.14 更新日志"></a>2019.9.14 更新日志</h2><ol>
<li>增加博文：《爱在黎明破晓前》观后感</li>
<li>准备增设软件推荐的博文及分类（已放入清单，暂时忙不过来，后面会加。）</li>
</ol>
<h2 id="2019-9-13-更新日志"><a href="#2019-9-13-更新日志" class="headerlink" title="2019.9.13 更新日志"></a>2019.9.13 更新日志</h2><ol>
<li>把除了更新日志和资源更新外的博文都留存为本地了（目录为 blog/旧博文）</li>
<li>添加心迹标签与分类，用以存放一些些所感所悟</li>
<li>使用 picgo+GitHub 作为图床（教程链接：<a href="https://blog.csdn.net/yefcion/article/details/88412025）" target="_blank" rel="noopener">https://blog.csdn.net/yefcion/article/details/88412025）</a></li>
</ol>
<h2 id="2019-2-4-更新日志及-1-30-更新未加更新日志的说明"><a href="#2019-2-4-更新日志及-1-30-更新未加更新日志的说明" class="headerlink" title="2019.2.4 更新日志及 1.30 更新未加更新日志的说明"></a>2019.2.4 更新日志及 1.30 更新未加更新日志的说明</h2><ol>
<li>因原页面 bug 修复不过来，所以重新搭建了一个，主题改为古风</li>
<li>加入了网易云歌单（还没有测试能不能正常播放）</li>
<li>VScode 汉化教程暂时未补全</li>
<li>发布了 deepin 初体验的博文，开始以 Linux 作为日常折腾的系统</li>
<li>修改了一下下不一样的世界这篇博文，但是由于比较敏感就没补全了，有兴趣的阔以面对面聊呢。</li>
</ol>
<h2 id="2018-10-13-更新日志"><a href="#2018-10-13-更新日志" class="headerlink" title="2018.10.13 更新日志"></a>2018.10.13 更新日志</h2><ol>
<li>完善标签，分类页面</li>
<li>添加 RSS 订阅</li>
<li>在右上角或者左上角实现 fork me on github</li>
<li>修改底部标签样式</li>
<li>增加头像旋转特效</li>
</ol>
]]></content>
      <categories>
        <category>更新日志</category>
      </categories>
      <tags>
        <tag>更新日志</tag>
      </tags>
  </entry>
</search>
